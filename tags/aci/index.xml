<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>aci on Lo Crestià</title><link>https://www.eiximenis.dev/tags/aci/</link><description>Recent content in aci on Lo Crestià</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Tue, 15 Sep 2020 18:00:00 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/tags/aci/index.xml" rel="self" type="application/rss+xml"/><item><title>Ejecutar contenedores bajo demanda con ACI y Azure Functions</title><link>https://www.eiximenis.dev/posts/2020-09-15-contenedores-by-demand-con-aci/</link><pubDate>Tue, 15 Sep 2020 18:00:00 +0000</pubDate><atom:modified>Tue, 15 Sep 2020 18:00:00 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2020-09-15-contenedores-by-demand-con-aci/</guid><description>Este post nace a partir de la necesidad de tener un sistema sencillo, pero 100% serverless para ejecutar tareas bajo demanda en Azure. Esas tareas se pueden ejecutar cada cierto tiempo (programadas) o bien como respuesta a algún evento.
Es obvio que en este modelo, Azure Functions encaja como anillo al dedo, pero había dos requisitos que eran importantes contemplar:
Esas tareas pueden ser escritas con cualquier lenguaje de desarrollo desde .</description><dc:creator>eiximenis</dc:creator><category>serverless</category><category>azurefunctions</category><category>aci</category><category>azure</category></item><item><title>Container Groups en ACI</title><link>https://www.eiximenis.dev/posts/2019-02-19-container-groups-en-aci/</link><pubDate>Tue, 19 Feb 2019 22:18:45 +0000</pubDate><atom:modified>Tue, 19 Feb 2019 22:18:45 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2019-02-19-container-groups-en-aci/</guid><description>&lt;p>Este es el segundo post sobre Azure Container instances. En el &lt;a href="https://geeks.ms/etomas/2019/02/01/aci-azure-container-instances-serverless-containers/">post anterior&lt;/a> vimos lo fácil que era publicar un contenedor y ejecutarlo usando ACI y discutimos algunas de sus limitaciones.&lt;/p>
&lt;p>En este post veremos que ACI nos permite &lt;strong>ejecutar grupos de contenedores&lt;/strong>, de forma igualmente sencilla y así tener algunos escenarios más complejos.&lt;/p></description><dc:creator>eiximenis</dc:creator><category>aci</category><category>aks</category><category>azure</category><category>docker</category><category>serverless</category></item><item><title>ACI (Azure Container Instances): Serverless containers</title><link>https://www.eiximenis.dev/posts/2019-02-01-aci-azure-container-instances-serverless-containers/</link><pubDate>Fri, 01 Feb 2019 11:56:15 +0000</pubDate><atom:modified>Fri, 01 Feb 2019 11:56:15 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2019-02-01-aci-azure-container-instances-serverless-containers/</guid><description>&lt;p>Cuando hablamos de &lt;em>serverless&lt;/em> todo el mundo lo asociamos a las soluciones tipo FaaS como Azure Functions o Amazon Lambda, pero hay otros productos que se engloban dentro de ese paradigma y en Azure uno de los más interesantes es &lt;strong>Azure Container Instances&lt;/strong>. Del mismo modo que con una Azure Function me limito a poner código en “ejecución” y esto se ejecuta en algún sitio, usando ACI lo que hago es “poner un contenedor” que se ejecutará en&amp;hellip; bueno, donde sea. Eso es &lt;em>serverless&lt;/em> señores.&lt;/p>
&lt;p>Con este post quiero iniciar una pequeña serie dedicada a ACI, como ACI se compara con su &lt;a href="https://www.youtube.com/watch?v=B90D3Eq7KjU">primo Zumosol&lt;/a> (AKS) y como AKS y ACI habilitan interesantes escenarios (altísima escalabilidad y workloads mixtos de contenedores).&lt;/p></description><dc:creator>eiximenis</dc:creator><category>aci</category><category>aks</category><category>azure</category><category>docker</category><category>serverless</category></item></channel></rss>