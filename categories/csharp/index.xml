<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>csharp on Lo Crestià</title><link>https://www.eiximenis.dev/categories/csharp/</link><description>Recent content in csharp on Lo Crestià</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Thu, 17 Sep 2020 18:00:00 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/categories/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>C#9 - Top Level Programs</title><link>https://www.eiximenis.dev/posts/2020-09-17-csharp9-top-level-programs/</link><pubDate>Thu, 17 Sep 2020 18:00:00 +0000</pubDate><atom:modified>Thu, 17 Sep 2020 18:00:00 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2020-09-17-csharp9-top-level-programs/</guid><description>Una de las novedades de C#9 a la que se está prestando (y probablemente con razón) menos atención es la característica denominada &amp;ldquo;Top Level Programs&amp;rdquo;, lo que básicamente viene a decir que, el siguiente programa es válido en C#9:
1 Console.WriteLine(&amp;#34;Hello World!&amp;#34;); Eso es todo lo que necesitas para ejecutar un Hello World en C#9. Vamos, que ya no necesitas el método estático Main definido en una clase como hasta ahora.</description><dc:creator>eiximenis</dc:creator><category>csharp</category></item><item><title>C#: Equals y ref structs</title><link>https://www.eiximenis.dev/posts/2020-02-05-csharp-equals-y-ref-structs/</link><pubDate>Wed, 05 Feb 2020 10:00:00 +0000</pubDate><atom:modified>Wed, 05 Feb 2020 10:00:00 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2020-02-05-csharp-equals-y-ref-structs/</guid><description>En .NET / C# sabemos que todos los tipos heredan de System.Object (aka object) por lo que, dada una referencia de tipo object podemos almacenar cualquier valor. Pero, también sabemos que en el fondo hay dos jerarquías de tipos claramente separadas, con características distintas: Por un lado los tipos por referencia (clases) y por otro lado los tipos por valor (estructuras). Los primeros, se almacenan en el heap y las variables son meras referencias (apuntadores) al objeto que está en el heap.</description><dc:creator>eiximenis</dc:creator><category>csharp</category></item></channel></rss>