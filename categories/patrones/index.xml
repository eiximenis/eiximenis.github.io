<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>patrones on Lo Cresti√†</title><link>https://www.eiximenis.dev/categories/patrones/</link><description>Recent content in patrones on Lo Cresti√†</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Fri, 26 Jan 2018 09:01:21 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/categories/patrones/index.xml" rel="self" type="application/rss+xml"/><item><title>Algunos conceptos en arquitrcturas de (¬ømicro?)servicios que se suelen confundir</title><link>https://www.eiximenis.dev/posts/2018-01-26-algunos-conceptos-en-arquitrcturas-de-microservicios-que-se-suelen-confundir/</link><pubDate>Fri, 26 Jan 2018 09:01:21 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-01-26-algunos-conceptos-en-arquitrcturas-de-microservicios-que-se-suelen-confundir/</guid><description>&lt;p>Bueno, dej√©moslo en¬†&lt;strong>arquitecturas distribu√≠das&lt;/strong>, que a veces hablamos muy (demasiado) alegremente de¬†&lt;em>microservicios&lt;/em>&amp;hellip;&lt;/p>
&lt;p>La idea es hablar sobre algunos conceptos, patrones que se prestan a confusi√≥n porque muchas veces ‚Äúse tocan‚Äù a nivel funcional y no queda claro si estamos uno u otro. Vamos a hablar de¬†&lt;em>proxies&lt;/em>,¬†&lt;em>API Gateway&lt;/em>,¬†&lt;em>Service Mesh&lt;/em> y¬†&lt;em>Backend For Frontend&lt;/em>.&lt;/p></description></item><item><title>Marker Interface: ¬øPatr√≥n o Anti-patr√≥n?</title><link>https://www.eiximenis.dev/posts/2018-01-19-marker-interface-patron-o-anti-patron/</link><pubDate>Fri, 19 Jan 2018 13:14:31 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-01-19-marker-interface-patron-o-anti-patron/</guid><description>&lt;p>Llamamos¬†&lt;em>marker interface&lt;/em> a una interfaz vac√≠a. S√≠, s√≠ sin m√©todos ni propiedades ni nada. A pesar de que te pueda parecer una tonter√≠a tiene sus usos. Vamos hablar un poco de este patr√≥n y sus usos y por qu√© es en cierta manera un anti-patr√≥n, aunque no siempre, porque en esa vida, como todo, todo depende&amp;hellip;&lt;/p></description></item><item><title>Algunas pinceladas sobre como arquitecturar tu WEB/API</title><link>https://www.eiximenis.dev/posts/2017-04-07-algunas-pinceladas-sobre-como-arquitecturar-tu-webapi/</link><pubDate>Fri, 07 Apr 2017 17:36:32 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2017-04-07-algunas-pinceladas-sobre-como-arquitecturar-tu-webapi/</guid><description>&lt;p>El otro d√≠a &lt;a href="https://twitter.com/antiocol">Ant√≠oco Llanos&lt;/a> lanzaba el &lt;a href="https://twitter.com/antiocol/status/849868562076491776">siguiente tweet&lt;/a>:&lt;/p>
&lt;p>(&lt;em>Siempre las mismas dudas. Que dependa mi capa de negocio de EF para usar sus IDbSet o no&amp;hellip; ¬øabstraer la abstracci√≥n?&lt;/em>)&lt;/p>
&lt;p>Contest√© yo con algunas sugerencias y eso deriv√≥ en otra conversaci√≥n paralela, as√≠ que me parece una buena idea poner &lt;strong>algunas pinceladas&lt;/strong> sobre como podemos abordar ese aspecto. Por supuesto y como digo siempe: &lt;strong>no hay balas de plata&lt;/strong> y &lt;strong>no existe la arquitectura para todo&lt;/strong>. Cada proyecto debe analizarse para valorar la arquitectura a abordar, o arquitecturas porque se pueden usar distintas en un mismo proyecto. As√≠, este post no tiene m√°s pretensi√≥n que contarte algunas ideas, pero las conclusiones que saques de ellas son cosa tuya üòâ&lt;/p></description></item><item><title>Atributos con comportamiento: un mal dise√±o</title><link>https://www.eiximenis.dev/posts/2016-07-01-atributos-con-comportamiento-un-mal-diseo/</link><pubDate>Fri, 01 Jul 2016 10:17:29 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-07-01-atributos-con-comportamiento-un-mal-diseo/</guid><description>Tarde o temprano, todo desarrollador ya se de ASP.NET MVC o WebApi necesita hacer sus propios filtros para validaciones propias de peticiones, logging, comprobaci√≥n de precondiciones‚Ä¶ En fin, lo habitual para lo que se usan los filtros, vamos.
Y tarde o temprano este desarrollador se da cuenta de que su filtro deber√≠a acceder a un determinado servicio de su aplicaci√≥n: quiz√° necesita hacer una consulta a la bbdd, o a un determinado elemento de negocio, o acceder al sistema de logging o cualquier cosa m√°s.</description></item><item><title>IoC o el poder de ceder el control</title><link>https://www.eiximenis.dev/posts/2008-10-28-ioc-o-el-poder-de-ceder-el-control/</link><pubDate>Tue, 28 Oct 2008 11:09:00 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2008-10-28-ioc-o-el-poder-de-ceder-el-control/</guid><description>&lt;p>Hablando con colegas de profesi√≥n, me he dado cuenta de que muchos de ellos no terminan de comprender el patr√≥n IoC o las ventajas que su uso comporta‚Ä¶ As√≠ que sin √°nimo de sentar c√°tedra he decidido escribir este post, por si le sirve a alguien‚Ä¶ xD&lt;/p></description></item></channel></rss>