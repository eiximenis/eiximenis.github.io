<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>asp.net vNext on Lo Cresti√†</title><link>https://www.eiximenis.dev/categories/asp.net-vnext/</link><description>Recent content in asp.net vNext on Lo Cresti√†</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Tue, 09 May 2017 14:55:27 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/categories/asp.net-vnext/index.xml" rel="self" type="application/rss+xml"/><item><title>ASP.NET Core ‚Äì IStartupFilter</title><link>https://www.eiximenis.dev/posts/2017-05-09-asp-net-core-istartupfilter/</link><pubDate>Tue, 09 May 2017 14:55:27 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2017-05-09-asp-net-core-istartupfilter/</guid><description>&lt;p>Buenas! Vamos a explorar en este post la interfaz &lt;strong>IStartupFilter&lt;/strong>, por lo general un desconocido de ASP.NET Core, pero bueno‚Ä¶ que est√° por ah√≠ y no est√° de m√°s conocerlo un poco. ¬°Vamos all√°!&lt;/p></description></item><item><title>Algunas pinceladas sobre como arquitecturar tu WEB/API</title><link>https://www.eiximenis.dev/posts/2017-04-07-algunas-pinceladas-sobre-como-arquitecturar-tu-webapi/</link><pubDate>Fri, 07 Apr 2017 17:36:32 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2017-04-07-algunas-pinceladas-sobre-como-arquitecturar-tu-webapi/</guid><description>&lt;p>El otro d√≠a &lt;a href="https://twitter.com/antiocol">Ant√≠oco Llanos&lt;/a> lanzaba el &lt;a href="https://twitter.com/antiocol/status/849868562076491776">siguiente tweet&lt;/a>:&lt;/p>
&lt;p>(&lt;em>Siempre las mismas dudas. Que dependa mi capa de negocio de EF para usar sus IDbSet o no&amp;hellip; ¬øabstraer la abstracci√≥n?&lt;/em>)&lt;/p>
&lt;p>Contest√© yo con algunas sugerencias y eso deriv√≥ en otra conversaci√≥n paralela, as√≠ que me parece una buena idea poner &lt;strong>algunas pinceladas&lt;/strong> sobre como podemos abordar ese aspecto. Por supuesto y como digo siempe: &lt;strong>no hay balas de plata&lt;/strong> y &lt;strong>no existe la arquitectura para todo&lt;/strong>. Cada proyecto debe analizarse para valorar la arquitectura a abordar, o arquitecturas porque se pueden usar distintas en un mismo proyecto. As√≠, este post no tiene m√°s pretensi√≥n que contarte algunas ideas, pero las conclusiones que saques de ellas son cosa tuya üòâ&lt;/p></description></item><item><title>Docker para el desarrollador de asp.net (iii)</title><link>https://www.eiximenis.dev/posts/2016-11-24-docker-para-el-desarrollador-de-asp-net-iii/</link><pubDate>Thu, 24 Nov 2016 09:27:48 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-11-24-docker-para-el-desarrollador-de-asp-net-iii/</guid><description>&lt;p>En el &lt;a href="http://geeks.ms/etomas/2016/11/22/docker-para-el-desarrollador-asp-net-ii/" target="_blank" rel="noopener noreferrer">post anterior&lt;/a> vimos como empaquetar y desplegar en Docker una sencilla aplicaci√≥n (un &lt;em>hello world&lt;/em>) en asp.net core. En este post vamos a ver como desplegar en Docker una aplicaci√≥n asp.net core (con sus controladores y vistas) y tambi√©n ver como lo podemos usar usando una imagen base que no tenga el SDK, solo el runtime.&lt;/p>
&lt;p>¬°Vamos all√°!&lt;/p></description></item><item><title>Docker para el desarrollador asp.net (ii)</title><link>https://www.eiximenis.dev/posts/2016-11-22-docker-para-el-desarrollador-asp-net-ii/</link><pubDate>Tue, 22 Nov 2016 12:30:46 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-11-22-docker-para-el-desarrollador-asp-net-ii/</guid><description>&lt;p>Seguimos con esta sobre el uso de Docker desde el punto de vista de un desarrollador asp.net (core). En este caso &lt;strong>vamos a construir nuestra primera imagen Docker&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Nota:&lt;/strong> Visual Studio 2017 incorpora de serie las &lt;em>Docker Tools&lt;/em> que automatizan todo lo que veremos en estos art√≠culos. Tiempo tendremos, m√°s adelante en esta serie, de hablar de las &lt;em>Docker Tools&lt;/em>. La raz√≥n de hacerlo primero todo ‚Äúmanual‚Äù es porque el objetivo de esta serie es ayudarte a que entiendas Docker, no presentarte el ‚Äúbot√≥n m√°gico‚Äù que se encarga de todo. Yo, es que soy de la vieja escuela: me gusta entender las cosas (al menos hasta donde puedo).&lt;/p></description></item><item><title>Docker para el desarrollador asp.net (i)</title><link>https://www.eiximenis.dev/posts/2016-11-21-docker-para-el-desarrollador-asp-net-i/</link><pubDate>Mon, 21 Nov 2016 10:52:01 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-11-21-docker-para-el-desarrollador-asp-net-i/</guid><description>&lt;p>Buenas! Vamos a &lt;strong>empezar una serie de posts&lt;/strong> dedicadas a &lt;em>Docker&lt;/em> desde el punto de vista de un desarrollador asp.net. &lt;strong>Empezaremos por lo m√°s b√°sico pero nos iremos adentrando un poco en el mundo de Docker&lt;/strong>. El objetivo es que terminemos teniendo unos conocimientos &lt;em>medios&lt;/em> que nos permitan entender que es Docker, como funciona, qu√© ventajas tiene y como usarlo (y cuando) en arquitecturas m√°s complejas donde haya m√°s de un contenedor. Pero‚Ä¶ &lt;strong>empecemos por el principio&lt;/strong>.&lt;/p></description></item><item><title>MVC6‚ÄìRecibir un GUID en el cuerpo de la petici√≥n</title><link>https://www.eiximenis.dev/posts/2016-09-30-mvc6recibir-un-guid-en-el-cuerpo-de-la-peticin/</link><pubDate>Fri, 30 Sep 2016 10:08:23 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-09-30-mvc6recibir-un-guid-en-el-cuerpo-de-la-peticin/</guid><description>&lt;p>Hoy me he encontrado un &lt;strong>controlador MVC6&lt;/strong> con la siguiente acci√≥n:&lt;/p>
&lt;pre style="max-width: 700px; font-family: consolas; background: #1e1e1e; white-space: nowrap; overflow-x: scroll; color: gainsboro">[&lt;span style="color: #4ec9b0">HttpPut&lt;/span>]&lt;br />[&lt;span style="color: #4ec9b0">Route&lt;/span>(&lt;span style="color: #d69d85">"{userid:int}/faceprofile"&lt;/span>)]&lt;br />&lt;span style="color: #569cd6">public&lt;/span>&amp;nbsp;&lt;span style="color: #569cd6">async&lt;/span>&amp;nbsp;&lt;span style="color: #4ec9b0">Task&lt;/span>&amp;lt;&lt;span style="color: #b8d7a3">IActionResult&lt;/span>&amp;gt; SetFaceProfileId(&lt;span style="color: #569cd6">int&lt;/span> userid, [&lt;span style="color: #4ec9b0">FromBody&lt;/span>] &lt;span style="color: #4ec9b0">Guid&lt;/span> id)&lt;/pre>
&lt;p>Claramente su autor esperaba que pudieramos poner un Guid en el cuerpo de la petici√≥n y eso funcionar√≠a‚Ä¶ Pero, ¬øcomo debe mandarse?&lt;/p></description></item><item><title>Middlewares de autenticaci√≥n en asp.net core</title><link>https://www.eiximenis.dev/posts/2016-04-19-middlewares-de-autenticacin-en-asp-net-core/</link><pubDate>Tue, 19 Apr 2016 10:25:32 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-04-19-middlewares-de-autenticacin-en-asp-net-core/</guid><description>&lt;p>La autenticaci√≥n y autorizaci√≥n de peticiones es una de las funcionalidades que m√°s quebraderos da en el desarrollo de aplicaciones en ASP.NET. Adem√°s es que ha ido cambiando con el tiempo‚Ä¶ En un escenario de internet, en ASP.NET cl√°sico, ya fuese Webforms o MVC us√°bamos FormsAuthentication. Por otra parte cuando apareci√≥ WebApi, incorpor√≥ sus propios mecanismos de autenticaci√≥n y autorizaci√≥n, generalmente basados en la implementaci√≥n de MessageHandlers.&lt;/p></description></item><item><title>Autenticaci√≥n por AAD en ASP.NET Core</title><link>https://www.eiximenis.dev/posts/2016-04-07-autenticacin-por-aad-en-asp-net-core/</link><pubDate>Thu, 07 Apr 2016 16:33:41 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-04-07-autenticacin-por-aad-en-asp-net-core/</guid><description>&lt;p>Este es un &lt;strong>post introductorio, de una serie de posts&lt;/strong>, donde veremos como podemos integrar ASP.NET Core y &lt;em>Azure Active Directory&lt;/em> (AAD). En este primer escenario el objetivo es tener una aplicaci√≥n web, donde se requiera hacer login contra AAD para autenticarse.&lt;/p>
&lt;p>&lt;strong>Nota:&lt;/strong> El post est√° basado en la RC1 de ASP.NET Core‚Ä¶ Lo digo porque bueno, a saber que &lt;span style="text-decoration: line-through;">romper√°n&lt;/span> mejorar√°n en futuras versiones, pues igual algo cambia üôÇ&lt;/p></description></item><item><title>Creating middlewares de asp.net core</title><link>https://www.eiximenis.dev/posts/2016-02-29-creating-middlewares-de-asp-net-core/</link><pubDate>Mon, 29 Feb 2016 17:08:12 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-02-29-creating-middlewares-de-asp-net-core/</guid><description>&lt;p>Asp.net core se basa en el concepto de &lt;strong>middleware&lt;/strong>. En este modelo la petici√≥n web viaja a trav√©s de un conjunto de componentes. Cada componente recibe la petici√≥n y puede:&lt;/p>
&lt;ol>
&lt;li>Modificar la petici√≥n &lt;strong>y enviarla al siguiente componente&lt;/strong>&lt;/li>
&lt;li>O bien, generar una respuesta &lt;strong>y enviarla de vuelta al componente anterior&lt;/strong>.&lt;/li>
&lt;/ol></description></item><item><title>Routers en asp.net core</title><link>https://www.eiximenis.dev/posts/2016-02-26-routers-en-asp-net-core/</link><pubDate>Fri, 26 Feb 2016 11:47:29 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2016-02-26-routers-en-asp-net-core/</guid><description>&lt;p>Cuando hablamos del &lt;em>routing&lt;/em> solemos referirnos al proceso por el cual una petici√≥n es enrutada hacia una acci√≥n concreta de un controlador. Esa definici√≥n es cierta en el contexto de una aplicaci√≥n ASP.NET MVC (y/o WebApi) pero en ASP.NET Core, el concepto de routing es una parte integral del framework.&lt;/p>
&lt;p>Por ello, en ASP.NET Core entendemos el routing como el proceso mediante el cual una petici√≥n web es enrutada hacia donde tenga que ser tratada. El destino puede ser una acci√≥n de un controlador, pero no tiene por qu√© (el middleware de MVC6 podr√≠a no estar instalado en el pipeline de la aplicaci√≥n). En este post vamos a ver como funciona este proceso de enrutado.&lt;/p></description></item></channel></rss>