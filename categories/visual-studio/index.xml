<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>visual studio on Lo Crestià</title><link>https://www.eiximenis.dev/categories/visual-studio/</link><description>Recent content in visual studio on Lo Crestià</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Wed, 06 Feb 2019 18:09:40 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/categories/visual-studio/index.xml" rel="self" type="application/rss+xml"/><item><title>ASP.NET Core: Error de npm al generar una imagen Docker de un proyecto creado con la plantilla de React</title><link>https://www.eiximenis.dev/posts/2019-02-06-asp-net-core-error-de-npm-al-generar-una-imagen-docker-de-un-proyecto-creado-con-la-plantilla-de-react/</link><pubDate>Wed, 06 Feb 2019 18:09:40 +0000</pubDate><atom:modified>Wed, 06 Feb 2019 18:09:40 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2019-02-06-asp-net-core-error-de-npm-al-generar-una-imagen-docker-de-un-proyecto-creado-con-la-plantilla-de-react/</guid><description>&lt;p>He visto este problema con un proyecto generado a partir de la plantilla de SPA de React, pero quizá puede aplicar a otras plantillas de SPA (como Angular).&lt;/p></description><dc:creator>eiximenis</dc:creator><category>asp.net core</category><category>docker</category><category>reactjs</category><category>visual studio</category></item><item><title>Depurar netcore ejecutándose en WSL con VS2017</title><link>https://www.eiximenis.dev/posts/2018-11-15-depurar-netcore-ejecutandose-en-wsl-con-vs2017/</link><pubDate>Thu, 15 Nov 2018 09:27:24 +0000</pubDate><atom:modified>Thu, 15 Nov 2018 09:27:24 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2018-11-15-depurar-netcore-ejecutandose-en-wsl-con-vs2017/</guid><description>&lt;p>Hoy he tenido que afrontar la dolorosa situación de un código en netcore que funcionaba correctamente en mi máquina (Windows 10) pero que al ejecutarse en Docker fallaba miserablemente.&lt;/p>
&lt;p>Dado que el error que imprimía por consola era que no encontraba un fichero, lo primero fue comprobar que nuestro código era &lt;em>cross-platform&lt;/em> (p. ej. que usábamos siempre Path.Combine y no concatenábamos el caráter &lt;code>\&lt;/code> para separar directorios) ya que la imagen Docker era de Linux. Luego hicimos todas las verificaciones habidas y por haber (permisos, etc) y nada. Todo parecía correcto. Al final, nos preguntamos si era un problema de Docker o de cualquier Linux en general y ahí acudimos a WSL.&lt;/p>
&lt;p>Ejecutamos el programa bajo WSL y obtuvimos el mismo error. Eso era bueno por dos motivos: No era Docker la fuente del error y además nos permitía depurar el proceso.&lt;/p></description><dc:creator>eiximenis</dc:creator><category>depuracion</category><category>visual studio</category></item><item><title>Dependencias condicionales en VS</title><link>https://www.eiximenis.dev/posts/2018-01-22-dependencias-condicionales-en-vs/</link><pubDate>Mon, 22 Jan 2018 16:28:19 +0000</pubDate><atom:modified>Mon, 22 Jan 2018 16:28:19 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2018-01-22-dependencias-condicionales-en-vs/</guid><description>&lt;p>Bueno, imagina que trabajas en un proyecto en NetCore que debe ser multiplataforma. En general el propio framework te provee de todo lo necesario, pero sigamos imaginando que algunas partes de tu proyecto dependen via P/Invoke de llamadas nativas.&lt;/p>
&lt;p>En este caso puedes optar por tener todos los enlaces P/Invoke para cada plataforma en el mismo proyecto (no hay ningún problema) o bien tenerlos separados en proyectos por cada una de las plataformas.&lt;/p></description><dc:creator>eiximenis</dc:creator><category>herramientas</category><category>Sin categoría</category><category>visual studio</category></item><item><title>Las herramientas de Docker de VS2017</title><link>https://www.eiximenis.dev/posts/2017-07-27-las-herramientas-de-docker-de-vs2017/</link><pubDate>Thu, 27 Jul 2017 15:50:25 +0000</pubDate><atom:modified>Thu, 27 Jul 2017 15:50:25 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2017-07-27-las-herramientas-de-docker-de-vs2017/</guid><description>&lt;p>Una de las novedades de VS2017 es el soporte integrado para Docker: podemos desplegar fácilmente nuestras soluciones en contenedores locales y depurar nuestro código Docker que se ejecuta en un contenedor. &lt;strong>Pero… ¿cómo funciona exactamente?&lt;/strong>&lt;/p>
&lt;p>**&lt;/p>
&lt;p>**&lt;/p></description><dc:creator>eiximenis</dc:creator><category>docker</category><category>visual studio</category></item></channel></rss>