<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>javascript on Lo Crestià</title><link>https://www.eiximenis.dev/categories/javascript/</link><description>Recent content in javascript on Lo Crestià</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Thu, 31 Jan 2019 15:45:13 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript: Limitar el tiempo de ejecución de una promise</title><link>https://www.eiximenis.dev/posts/2019-01-31-javascript-limitar-el-tiempo-de-ejecucion-de-una-promise/</link><pubDate>Thu, 31 Jan 2019 15:45:13 +0000</pubDate><atom:modified>Thu, 31 Jan 2019 15:45:13 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2019-01-31-javascript-limitar-el-tiempo-de-ejecucion-de-una-promise/</guid><description>&lt;p>Este es un post cortito y motivado porque hace algunos días en el curso de &lt;a href="https://www.campusmvp.es/catalogo/Product-Programaci%C3%B3n-avanzada-con-JavaScript-y-ECMAScript_206.aspx">JavaScript avanzado&lt;/a> que tengo, junto al maestro &lt;a href="https://twitter.com/jm_alarcon">José Manuel Alarcón&lt;/a>, en CampusMVP un alumno preguntó más o menos eso: como se podía tener un &lt;em>timeout&lt;/em> en una promise, de forma que esa fallase automáticamente si se superaba un determinado tiempo.&lt;/p></description><dc:creator>eiximenis</dc:creator><category>javascript</category></item><item><title>Variables privadas en clases ES2015</title><link>https://www.eiximenis.dev/posts/2015-11-02-variables-privadas-en-clases-es2015/</link><pubDate>Mon, 02 Nov 2015 18:11:02 +0000</pubDate><atom:modified>Mon, 02 Nov 2015 18:11:02 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2015-11-02-variables-privadas-en-clases-es2015/</guid><description>Una de las novedades de ES6 es la posibilidad de usar clases. Si bien esas clases son realmente sugar syntax sobre el patrón de función constructora, tienen alguna característica que simplifica el uso de dicho patrón y ofrecen una sintaxis que según como se mire puede ser más cómoda. Pero el estándard de ES2015 no tiene ningún mecanismo para indicar que una variable de una clase sea pública o privada. La visibilidad de variables en JavaScript es un clásico, sobre el que ya he escrito algún post.</description><dc:creator>eiximenis</dc:creator><category>javascript</category></item><item><title>¿Qué hace ‘new’ en JavaScript?</title><link>https://www.eiximenis.dev/posts/2015-10-15-qu-hace-new-en-javascript/</link><pubDate>Thu, 15 Oct 2015 13:09:01 +0000</pubDate><atom:modified>Thu, 15 Oct 2015 13:09:01 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2015-10-15-qu-hace-new-en-javascript/</guid><description>Si preguntas a mucha gente cual es el objetivo de new en JavaScript te dirán que el de crear objetos. Y estarán en lo cierto, aunque esa definición no es del todo precisa. Y es que mucha gente no entiende exactamente que hace new así que vamos a dedicarle este post.
Creación de objetos sin new
La verdad es que new no es necesario en JavaScript. Se pueden crear objetos perfectamente sin necesidad de usar new:</description><dc:creator>eiximenis</dc:creator><category>javascript</category></item><item><title>La dualidad objeto-función en JavaScript</title><link>https://www.eiximenis.dev/posts/2015-10-08-la-dualidad-objeto-funcin-en-javascript/</link><pubDate>Thu, 08 Oct 2015 21:28:00 +0000</pubDate><atom:modified>Thu, 08 Oct 2015 21:28:00 +0000</atom:modified><guid>https://www.eiximenis.dev/posts/2015-10-08-la-dualidad-objeto-funcin-en-javascript/</guid><description>No sé si Brendan Eich es un amante de la física cuántica, pero al menos viendo algunas de las características, así lo parece. No solo tenemos el principio de incertidumbre de this si no que también tenemos el hecho de que en JavaScript un objeto puede comportarse como una función y viceversa, es decir una dualidad objeto-función.
Tomemos jQuery p. ej. Por defecto nos define el archiconocido $, con el cual podemos hacer algo como $(“#mydiv”), es decir, usarlo como una función, pero también podemos hacer $.</description><dc:creator>eiximenis</dc:creator><category>javascript</category></item></channel></rss>