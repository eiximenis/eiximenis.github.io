<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>depuracion on Lo Crestià</title><link>https://www.eiximenis.dev/categories/depuracion/</link><description>Recent content in depuracion on Lo Crestià</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Thu, 15 Nov 2018 09:27:24 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/categories/depuracion/index.xml" rel="self" type="application/rss+xml"/><item><title>Depurar netcore ejecutándose en WSL con VS2017</title><link>https://www.eiximenis.dev/posts/2018-11-15-depurar-netcore-ejecutandose-en-wsl-con-vs2017/</link><pubDate>Thu, 15 Nov 2018 09:27:24 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-11-15-depurar-netcore-ejecutandose-en-wsl-con-vs2017/</guid><description>&lt;p>Hoy he tenido que afrontar la dolorosa situación de un código en netcore que funcionaba correctamente en mi máquina (Windows 10) pero que al ejecutarse en Docker fallaba miserablemente.&lt;/p>
&lt;p>Dado que el error que imprimía por consola era que no encontraba un fichero, lo primero fue comprobar que nuestro código era &lt;em>cross-platform&lt;/em> (p. ej. que usábamos siempre Path.Combine y no concatenábamos el caráter &lt;code>\&lt;/code> para separar directorios) ya que la imagen Docker era de Linux. Luego hicimos todas las verificaciones habidas y por haber (permisos, etc) y nada. Todo parecía correcto. Al final, nos preguntamos si era un problema de Docker o de cualquier Linux en general y ahí acudimos a WSL.&lt;/p>
&lt;p>Ejecutamos el programa bajo WSL y obtuvimos el mismo error. Eso era bueno por dos motivos: No era Docker la fuente del error y además nos permitía depurar el proceso.&lt;/p></description></item><item><title>Usar vscode para depurar tus contenedores netcore</title><link>https://www.eiximenis.dev/posts/2018-06-15-usar-vscode-para-depurar-tus-contenedores-netcore/</link><pubDate>Fri, 15 Jun 2018 11:14:24 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-06-15-usar-vscode-para-depurar-tus-contenedores-netcore/</guid><description>&lt;p>Una de las ventajas que tiene **Visual Studio 2017 es el &lt;a href="https://geeks.ms/etomas/2017/07/27/las-herramientas-de-docker-de-vs2017/">soporte de depuración para contenedores netcore&lt;/a>. **A partir de la versión 15.7 el soporte está relativamente maduro soportando algunos escenarios que daban errores en versiones anteriores (p. ej. dos servicios compose usando la misma imagen).&lt;/p>
&lt;p>Pero&amp;hellip; ¿y si no podemos/queremos usar Visual Studio? ¿Tenemos alguna alternativa? Pues sí: &lt;strong>usar visual studio code&lt;/strong>, y aunque el &lt;em>workflow&lt;/em> no es tan sencillo como en Visual Studio, al final se puede conseguir algo similar: ejecutar y depurar un contenedor. ¡Vamos allá!&lt;/p></description></item></channel></rss>