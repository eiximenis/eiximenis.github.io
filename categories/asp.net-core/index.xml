<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>asp.net core on Lo Crestià</title><link>https://www.eiximenis.dev/categories/asp.net-core/</link><description>Recent content in asp.net core on Lo Crestià</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>{}</copyright><lastBuildDate>Fri, 28 Jun 2019 16:22:05 +0000</lastBuildDate><atom:link href="https://www.eiximenis.dev/categories/asp.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Traducir entre gRPC y HTTP/JSON</title><link>https://www.eiximenis.dev/posts/2019-06-28-traducir-entre-grpc-y-http-json/</link><pubDate>Fri, 28 Jun 2019 16:22:05 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2019-06-28-traducir-entre-grpc-y-http-json/</guid><description>&lt;p>Como comenté en mi &lt;a href="http://geeks.ms/etomas/2019/06/27/grpc-y-no-grpc-todo-junto-en-el-mismo-proyecto/">post anterior sobre gRPC&lt;/a>, la traducción entre gRPC y JSON es estándard. Esto nos permite tener nuestra comunicación interna en gRPC y exponer una fachada en HTTP con JSON para aquellos clientes que (todavía) no pueden usar gRPC.&lt;/p>
&lt;p>En este post os voy a mostrar como podemos crear dicha fachada usando Envoy ejecutándose en un contenedor Docker. ¡Vamos allá!&lt;/p></description></item><item><title>gRPC y "no gRPC" todo junto en el mismo proyecto</title><link>https://www.eiximenis.dev/posts/2019-06-27-grpc-y-no-grpc-todo-junto-en-el-mismo-proyecto/</link><pubDate>Thu, 27 Jun 2019 09:22:03 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2019-06-27-grpc-y-no-grpc-todo-junto-en-el-mismo-proyecto/</guid><description>&lt;p>Una de las novedades que incluye Net Core 3 es el soporte para gRPC. ¿No conoces gRPC? Bueno, pues básicamente se trata del RPC de toda la vida, pero vestido a la moda, duchado y perfumado. Vamos, si te lees los puntos principales de la &lt;a href="https://grpc.io/">página oficial de gRPC&lt;/a> (definición de servicio independiente del lenguaje, soporte de muchos lenguajes, streaming bi-direccionales) es como si volvieses unos cuantos años atrás y &lt;a href="https://blog.mattmags.com/2011/05/19/don-box-the-bathtub-lecture/">Don Box estuviese en la bañera&lt;/a> vendiéndote SOAP. Y de todos modos, cuando hablábamos de &lt;a href="https://es.wikipedia.org/wiki/Simple_Object_Access_Protocol">SOAP&lt;/a> ya era difícil no acordarse de CORBA (ya fuese &lt;a href="https://es.wikipedia.org/wiki/CORBA">el estándard&lt;/a> o &lt;a href="https://es.wikipedia.org/wiki/Modelo_de_Objetos_de_Componentes_Distribuidos">el de Microsoft&lt;/a> xD).&lt;/p></description></item><item><title>Net Core (Linux) Error: System.IO .IOException: The configured user limit on the number of inotify instances has been reached</title><link>https://www.eiximenis.dev/posts/2019-06-17-net-core-linux-error-system-io-ioexception-the-configured-user-limit-on-the-number-of-inotify-instances-has-been-reached/</link><pubDate>Mon, 17 Jun 2019 09:57:08 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2019-06-17-net-core-linux-error-system-io-ioexception-the-configured-user-limit-on-the-number-of-inotify-instances-has-been-reached/</guid><description>&lt;p>Buenas! Andaba yo preparando unas demos donde tenía varios contenedores ejecutándose en un Kubernetes, usando netcore y Linux. Todo funcionaba (más o menos) bien, hasta que de golpe y porrazo los contenedores empezaron a fallar:&lt;/p>
&lt;pre>&lt;span class="js-display-url">System.IO&lt;/span>&lt;span class="tco-ellipsis">&lt;span class="invisible"> &lt;/span>&lt;/span>.IOException: The configured user limit (1024) on the number of inotify instances has been reached&lt;/pre>
&lt;p>Este error apareció cuando escalé el número de contenedores y se daba en los nuevos contenedores creados (los iniciados seguían funcionando). ¿Qué podía estar sucendiendo?&lt;/p></description></item><item><title>AKS, KeyVault y netcore</title><link>https://www.eiximenis.dev/posts/2019-02-23-aks-keyvault-y-netcore/</link><pubDate>Sat, 23 Feb 2019 16:16:31 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2019-02-23-aks-keyvault-y-netcore/</guid><description>&lt;p>¡Buenas! Vamos a ver en este artículo &lt;strong>como podemos leer secretos almacenados en un &lt;a href="https://azure.microsoft.com/es-es/services/key-vault/">Azure Key Vault&lt;/a>&lt;/strong> desde nuestro código netcore ejecutándose en un AKS.&lt;/p>
&lt;p>A diferencia de ACR donde contamos con una integración nativa en la cual nos basta con usar un _service account _de AKS vinculado a un _service principal _de Azure que tenga permisos de lectura contra el ACR (escribiéndolo veo que esto da para un pequeño futuro post), para Key Vault no tenemos integración nativa.&lt;/p></description></item><item><title>Trabajando con AKS Devspaces</title><link>https://www.eiximenis.dev/posts/2019-02-13-trabajando-con-aks-devspaces/</link><pubDate>Wed, 13 Feb 2019 17:34:10 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2019-02-13-trabajando-con-aks-devspaces/</guid><description>&lt;p>AKS Devspaces es una característica que Microsoft está promocionando bastante en sus charlas: casi en cualquier evento donde se hable de AKS se demuestra, ni que sea brevemente, Devspaces.&lt;/p>
&lt;p>Pero&amp;hellip; qué es y lo más importante: ¿Para qué sirve y como se usa?&lt;/p></description></item><item><title>ASP.NET Core: Error de npm al generar una imagen Docker de un proyecto creado con la plantilla de React</title><link>https://www.eiximenis.dev/posts/2019-02-06-asp-net-core-error-de-npm-al-generar-una-imagen-docker-de-un-proyecto-creado-con-la-plantilla-de-react/</link><pubDate>Wed, 06 Feb 2019 18:09:40 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2019-02-06-asp-net-core-error-de-npm-al-generar-una-imagen-docker-de-un-proyecto-creado-con-la-plantilla-de-react/</guid><description>&lt;p>He visto este problema con un proyecto generado a partir de la plantilla de SPA de React, pero quizá puede aplicar a otras plantillas de SPA (como Angular).&lt;/p></description></item><item><title>Generar imágenes Docker de proyectos SPA de netcore</title><link>https://www.eiximenis.dev/posts/2018-10-25-generar-imagenes-docker-de-proyectos-spa-de-netcore/</link><pubDate>Thu, 25 Oct 2018 14:04:52 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-10-25-generar-imagenes-docker-de-proyectos-spa-de-netcore/</guid><description>&lt;p>¡Buenas!&lt;/p>
&lt;p>Cuando creas un proyecto SPA de netcore, ya sea mediante VS o bien usando &lt;em>dotnet new&lt;/em> y alguna plantilla SPA como react (&lt;em>dotnet new react&lt;/em>), se genera una estructura parecida a la siguiente:&lt;/p>
&lt;p>&lt;a href="https://geeks.ms/etomas/wp-content/uploads/sites/154/2018/10/spa-estructura.png">&lt;img class="alignnone size-full wp-image-2195" src="https://geeks.ms/etomas/wp-content/uploads/sites/154/2018/10/spa-estructura.png" alt="Estructura ficheros proyecto SPA" width="249" height="293" />&lt;/a>&lt;/p>
&lt;p>La carpeta “ClientApp” contiene todo el código de cliente (javascript, CSS y demás) mientras que el resto es el código netcore que se limita a “lanzar” la SPA.&lt;/p></description></item><item><title>Desplegar una aplicación ASP.NET Core 2.1 con https en Docker</title><link>https://www.eiximenis.dev/posts/2018-07-02-desplegar-una-aplicacion-asp-net-core-2-1-con-https-en-docker/</link><pubDate>Mon, 02 Jul 2018 15:49:12 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-07-02-desplegar-una-aplicacion-asp-net-core-2-1-con-https-en-docker/</guid><description>&lt;p>Una de las novedades de ASP.NET Core 2.1 es que redirige automáticamente todo el tráfico de http a https y, además, fuerza el uso de HSTS. Sobre https nada que decir, seguro que todos lo conocéis.&lt;/p>
&lt;p>Sobre HSTS simplemente comentar que es un protocolo mediante el cual el servidor informa a los &lt;em>user-agents&lt;/em> de que solo acepta conexiones seguras, es decir que deben usar HTTPS para acceder a sus recursos. A pesar de que HSTS tiene sus limitaciones (y que para evitarlas sería necesaria un protocolo a nivel de DNS y no de servidores) su uso es una práctica imprescindible en seguridad web. De hecho **hoy en día NO HAY EXCUSA PARA NO USAR HTTPS NI HSTS **en cualquier sitio web. Da absolutamente igual lo que haga. No usar https ni hsts es una negligencia que debería avergonzar a cualquiera.&lt;/p></description></item><item><title>Usar vscode para depurar tus contenedores netcore</title><link>https://www.eiximenis.dev/posts/2018-06-15-usar-vscode-para-depurar-tus-contenedores-netcore/</link><pubDate>Fri, 15 Jun 2018 11:14:24 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-06-15-usar-vscode-para-depurar-tus-contenedores-netcore/</guid><description>&lt;p>Una de las ventajas que tiene **Visual Studio 2017 es el &lt;a href="https://geeks.ms/etomas/2017/07/27/las-herramientas-de-docker-de-vs2017/">soporte de depuración para contenedores netcore&lt;/a>. **A partir de la versión 15.7 el soporte está relativamente maduro soportando algunos escenarios que daban errores en versiones anteriores (p. ej. dos servicios compose usando la misma imagen).&lt;/p>
&lt;p>Pero&amp;hellip; ¿y si no podemos/queremos usar Visual Studio? ¿Tenemos alguna alternativa? Pues sí: &lt;strong>usar visual studio code&lt;/strong>, y aunque el &lt;em>workflow&lt;/em> no es tan sencillo como en Visual Studio, al final se puede conseguir algo similar: ejecutar y depurar un contenedor. ¡Vamos allá!&lt;/p></description></item><item><title>Docker: Imágenes Windows y Linux con un solo Dockerfile. Sí, pero…</title><link>https://www.eiximenis.dev/posts/2018-06-12-docker-imagenes-windows-y-linux-con-un-solo-dockerfile-si-pero/</link><pubDate>Tue, 12 Jun 2018 15:28:11 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-06-12-docker-imagenes-windows-y-linux-con-un-solo-dockerfile-si-pero/</guid><description>&lt;p>Una de las características menos conocidas de Docker son las imágenes multi-arch. Es una característica que agradecerás si trabajas tanto en contenedores Linux como Windows.&lt;/p>
&lt;p>Como ya debes saber, Docker no permite ejecutar contenedores cuyos binarios no sean los mismos de la plataforma que los hospeda: es decir, si estás en Windows solo puedes ejecutar contenedores cuyos binarios sean Windows y si estás en Linux pues lo mismo. Y sí, Docker CE For Windows “hace tramas” para permitirte ejecutar contenedores Linux: los ejecuta en una máquina virtual Hyper-V.&lt;/p>
&lt;p>Si desarrollas un producto multi-plataforma y quieres ofrecer contenedores tanto Linux como Windows, el uso de imágenes multi-arch es algo que, como digo, vas a agradecer, &lt;strong>ya que te permite usar un solo Dockerfile&lt;/strong> para generar ambas imágenes.&lt;/p></description></item><item><title>HttpClient en C# y servicios de Docker escalados.</title><link>https://www.eiximenis.dev/posts/2018-06-11-httpclient-en-c-y-servicios-de-docker-escalados/</link><pubDate>Mon, 11 Jun 2018 11:09:25 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-06-11-httpclient-en-c-y-servicios-de-docker-escalados/</guid><description>&lt;p>En este post vamos a ver como escalar servicios, tanto en Compose, como en Swarm como en Kubernetes y luego veremos algunas consideraciones cuando usemos HttpClient desde el cliente al acceder a un servidor escalado.&lt;/p>
&lt;p>Nos centramos en el escenario de escalado básico, es decir, sin demasiada lógica.&lt;/p>
&lt;p>&lt;strong>[Autobombo]:&lt;/strong> Si estás interesado en temas de Docker y Kubernetes, échale un vistazo a &lt;a href="https://www.campusmvp.es/catalogo/Product-Docker-y-Kubernetes-desarrollo-y-despliegue-de-aplicaciones-basadas-en-contenedores_237.aspx">mi curso de Docker y Kubernetes en CampusMVP&lt;/a>.&lt;/p></description></item><item><title>Monitorizando nuestros servicios en Kubernetes con Beatpulse</title><link>https://www.eiximenis.dev/posts/2018-06-03-monitorizando-nuestros-servicios-en-kubernetes-con-beatpulse/</link><pubDate>Sun, 03 Jun 2018 16:58:34 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-06-03-monitorizando-nuestros-servicios-en-kubernetes-con-beatpulse/</guid><description>&lt;p>&lt;strong>&lt;em>Disclaimer&lt;/em>:&lt;/strong> &lt;span style="text-decoration: underline;">En ese post hablo de una librería (Beatpulse) de la que soy contribuidor&lt;/span> (lo aclaro, para que no haya ningún malentendido).&lt;/p>
&lt;p>En todo sistema distribuído es importante disponer de un mecanismo que permita saber en todo momento &lt;strong>si un servicio está funcionando o no&lt;/strong>. Es cierto que el concepto de “funcionando” es algo difuso de definir, pero yendo a mínimos deberíamos saber si un sistema se ha caído o no.&lt;/p></description></item><item><title>Ejecutar pruebas de tus contenedores en VSTS</title><link>https://www.eiximenis.dev/posts/2018-03-07-ejecutar-pruebas-de-tus-contenedores-en-vsts/</link><pubDate>Wed, 07 Mar 2018 12:33:37 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-03-07-ejecutar-pruebas-de-tus-contenedores-en-vsts/</guid><description>&lt;p>Si desarrollas con Docker es probable que uses &lt;a href="https://geeks.ms/etomas/2017/11/28/docker-multi-stage-builds-o-como-compilar-casi-cualquier-cosa-sin-tener-que-instalar-nada/">&lt;em>multi-stage builds&lt;/em>&lt;/a> para crear tus contenedores, en este caso unificas bajo un mismo Dockerfile la creación del binario (usando una imagen de compilación) y la creación de la imagen final (basandote en una imagen de &lt;em>runtime&lt;/em>).&lt;/p>
&lt;p>Ahora bien, si usas un pipeline de CI/CD con VSTS&amp;hellip; ¿como gestionar los tests de esos contenedores? Eso es lo que vamos a discutir en este post.&lt;/p></description></item><item><title>Gestionar la configuración en asp.net core y Docker</title><link>https://www.eiximenis.dev/posts/2018-01-31-gestionar-la-configuracion-en-asp-net-core-y-docker/</link><pubDate>Wed, 31 Jan 2018 12:40:32 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-01-31-gestionar-la-configuracion-en-asp-net-core-y-docker/</guid><description>&lt;p>Cuando desarrollamos una aplicación en asp.net core que queremos terminar ejecutando con Docker, el como gestionar la configuración puede causarnos más de un quebradero de cabeza.&lt;/p>
&lt;p>En este post voy a comentar, brevemente, como podemos gestionar varios escenarios de configuración.&lt;/p></description></item><item><title>Asp.Net Core – solucionar error al publicar en docker (assembly not found)</title><link>https://www.eiximenis.dev/posts/2018-01-24-asp-net-core-solucionar-error-al-publicar-en-docker-assembly-not-found/</link><pubDate>Wed, 24 Jan 2018 08:34:23 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2018-01-24-asp-net-core-solucionar-error-al-publicar-en-docker-assembly-not-found/</guid><description>&lt;p>Buenas! Imagina que tienes una aplicación hecha en Asp.Net Core y que referencia al &lt;a href="https://geeks.ms/etomas/2017/12/26/el-metapaquete-microsoft-aspnetcore-all/">metapaquete Microsoft.AspNetCore.All&lt;/a>. También tienes un Dockerfile y un fichero compose para generar la imagen &lt;a href="https://geeks.ms/etomas/2017/11/28/docker-multi-stage-builds-o-como-compilar-casi-cualquier-cosa-sin-tener-que-instalar-nada/">usando una &lt;/a>&lt;em>&lt;a href="https://geeks.ms/etomas/2017/11/28/docker-multi-stage-builds-o-como-compilar-casi-cualquier-cosa-sin-tener-que-instalar-nada/">multi-stage build&lt;/a>.&lt;/em>&lt;/p>
&lt;p>La imagen se genera sin problemas pero al ejecutarla recibes un error y no arranca.&lt;/p></description></item><item><title>El metapaquete Microsoft.AspNetCore.All</title><link>https://www.eiximenis.dev/posts/2017-12-26-el-metapaquete-microsoft-aspnetcore-all/</link><pubDate>Tue, 26 Dec 2017 19:47:54 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2017-12-26-el-metapaquete-microsoft-aspnetcore-all/</guid><description>&lt;p>Todos estamos acostumbrados a usar los &lt;strong>paquetes de NuGet en nuestros desarrollos&lt;/strong>. Pero a raíz de Net Core 2.0, apareció el concepto de &lt;em>metapaquete&lt;/em>. Qué es exactamente un &lt;em>metapaquete&lt;/em> y por qué existen?&lt;/p>
&lt;p>La respuesta rápida es que un &lt;em>metapaquete&lt;/em> de NuGet es simplemente un paquete que &lt;strong>no incluye ningún ensamblado, solo referencia a otros paquetes&lt;/strong>. Es, en definitiva, un mecanismo para “agrupar” paquetes de NuGet bajo un mismo número de version.&lt;/p></description></item><item><title>Swashbuckle con ASP.NET Core y AAD B2C</title><link>https://www.eiximenis.dev/posts/2017-10-06-swashbuckle-con-asp-net-core-y-aad-b2c/</link><pubDate>Fri, 06 Oct 2017 09:11:43 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2017-10-06-swashbuckle-con-asp-net-core-y-aad-b2c/</guid><description>&lt;p>&lt;a href="https://github.com/domaindrivendev/Swashbuckle">Swashbuckle&lt;/a> es una gran herramienta para crear documentaciones de tus APIs desarrolladas con ASP.NET Core. Por debajo usa Swagger y &lt;a href="https://swagger.io/swagger-ui/">Swagger UI&lt;/a> pero nos abstrae de instalar y configurar esos dos productos. Tan solo tenemos que instalar el paquete NuGet &lt;a href="https://www.nuget.org/packages/Swashbuckle.AspNetCore/">Swashbuckle.AspNetCore&lt;/a> y ya tenemos todo lo que necesitamos.&lt;/p></description></item><item><title>ASP.NET Core 2–Razor Pages</title><link>https://www.eiximenis.dev/posts/2017-05-25-asp-net-core-2-razor-pages/</link><pubDate>Thu, 25 May 2017 10:14:41 +0000</pubDate><guid>https://www.eiximenis.dev/posts/2017-05-25-asp-net-core-2-razor-pages/</guid><description>&lt;p>&lt;strong>Nota: Este post es sobre ASP.NET Core 2 Preview 1. Algunas cosas pueden cambiar en la versión final.&lt;/strong>&lt;/p>
&lt;p>¿Quien se acuerda de las ASP.NET Web Pages? Salieron tampoco hace tanto, más o menos junto con MVC3 y les acompañaba un producto propio (WebMatrix). Su objetivo era proporcionar un modelo de desarrollo basado en páginas (a lo Webforms) en contraposición del modelo basado en controladores de MVC.&lt;/p>
&lt;p>He de reconocer que nunca les presté mucha atención y tengo la impresión que el resto del mundo tampoco. Su objetivo creo que era ofrecer una puerta de entrada rápida a ASP.NET ofreciendo un modelo sencillo de páginas. Su principal problema es que era difícil integrarlo en un proyecto “más grande” que estuviese hecho en ASP.NET MVC y así tener partes usando “Web Pages” y otras en MVC. Y, honestamente, montar un proyecto complejo en un modelo basado en páginas, no termino de verlo.&lt;/p>
&lt;p>Personalmente las olvidé hace tiempo y por eso el anuncio de “Razor Pages” en ASP.NET Core 2 me sorprendió bastante. Pero la realidad es que Razor Pages es otra cosa bastante más interesante que las antiguas “Web Pages”…&lt;/p></description></item></channel></rss>